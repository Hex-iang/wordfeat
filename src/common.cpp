#include <common.hpp>namespace wordfeat{//// String Error Output#if defined(_WIN32)  std::string wfeatStrerror(int errnum)  {    std::string str;    char buffer[1024];    if (errnum)    {      (void) strerror_s(buffer, sizeof(buffer), errnum);      str = buffer;    }    return str;  }#elif (_POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600 || __APPLE__) && ! _GNU_SOURCE  std::string wfeatStrerror(int errnum)  {    std::string str;    char buffer[1024];    if (errnum)    {      (void) strerror_r(errnum, buffer, sizeof(buffer));      str = buffer;    }    return str;  }#elif defined(_GNU_SOURCE)  std::string wfeatStrerror(int errnum)  {    std::string str;    char buffer[1024];    if (errnum)    {      str = strerror_r(errnum, buffer, sizeof(buffer));    }    return str;  }#else  std::string wfeatStrerror(int errnum)  {    std::string str;    if (errnum)    {      str = strerror(errnum);    }    return str;  }#endif// // Global Initalizationvoid GlobalInit(int* pargc, char*** pargv) {  // Google flags.  ::gflags::ParseCommandLineFlags(pargc, pargv, true);  // Google logging.  ::google::InitGoogleLogging(*(pargv)[0]);  // Provide a backtrace on segfault.  ::google::InstallFailureSignalHandler();}} // namespace wordfeat